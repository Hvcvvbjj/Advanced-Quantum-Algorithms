# Advanced Quantum Algorithms

This repository demonstrates a minimal quantum circuit simulator written in Python. The focus is on clarity rather than performance and includes an implementation of Shor's factoring algorithm.

## Features

- Quantum state representation via complex vectors
- Basic gates and a simple `QuantumCircuit` abstraction
- Additional gates (`S`, `T`) and controlled operations
- Register-wide measurement utilities
- Quantum Fourier Transform utilities
- Controlled modular exponentiation (placeholder logic)
- Small phase estimation routine
- Expectation value evaluation for arbitrary observables
- Variational quantum eigensolver example components
- Enhanced noise models including amplitude and phase damping
- Toy quantum autoencoder with a gradient-based trainer
- Noise-aware orchestrator for distributed execution
- Example algorithms:
  - Shor's factoring method (`src/shor.py`)
  - Grover's search demo (`src/grover_example.py`)
  - Phase estimation demo (`src/phase_estimation_example.py`)
    with configurable iteration count

## Running

Install the dependency and execute the examples:

```bash
pip install numpy==1.26.4
python3 src/shor.py        # Shor's algorithm
python3 src/grover_example.py  # Grover's search
python3 src/phase_estimation_example.py  # Phase estimation
```

The simulator handles only very small integers but forms the basis for more sophisticated experiments.

An experimental skeleton for a cutting-edge quantum framework lives under
`src/quantum/advanced`.  Basic components for compilation, error correction,
noise modelling and variational circuits are now stubbed out.  A far more
ambitious blueprint can be found in `src/quantum/ultra`, outlining a
distributed, ML-driven quantum stack to be implemented in the future.
